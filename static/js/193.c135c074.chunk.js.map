{"version":3,"file":"static/js/193.c135c074.chunk.js","mappings":"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","sources":["CurrentMoviePage/currentMoviePage.styled.js","CurrentMoviePage/videos/Video.styled.js","CurrentMoviePage/videos/Video.jsx","CurrentMoviePage/currentMoviePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviePageContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n`;\n\nexport const Description = styled.div`\n  margin-left: 40px;\n`;\n\nexport const MovieLargeImageItem = styled.img`\n  height: 600px;\n  border-radius: 2%;\n`;\n\nexport const MoviePageNavigation = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport const Timer = styled.div`\n  position: absolute;\n  top: 3%;\n  left: 81%;\n  display: flex;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n  border: 0.3vh solid transparent;\n  border-radius: 50%;\n  color: coral;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(#222, #222) content-box no-repeat,\n    conic-gradient(\n        coral ${props => props.circlepersentage * 10}%,\n        0,\n        transparent\n      )\n      border-box;\n\n  z-index: 1;\n`;\n\nexport const MovieImageWrapper = styled.div`\n  position: relative;\n`;\n\nexport const PageContainer = styled.div`\n  overflow: hidden;\n  padding: 0 30px 0 30px;\n`;\n\nexport const MovieTitle = styled.a`\n  font-size: 50px;\n  font-weight: 600;\n  display: block;\n\n  margin-bottom: 40px;\n`;\n\nexport const GenresContainer = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n`;\nexport const GenresItem = styled.li`\n  margin: 10px;\n  &:first-child {\n    margin-left: 0;\n  }\n  border: 1px solid #222;\n  border-radius: 10px;\n  padding: 8px;\n  opacity: 0.5;\n  background-color: rgba(34, 34, 34, 0.2);\n`;\n","import styled from 'styled-components';\n\nexport const VideoList = styled.ul`\n    list-style-type:none;\n\n    height:200px;\n    overflow:auto;\n\n    display:flex;\n    flex-wrap:wrap;\n`;\n\nexport const VideoFrame = styled.iframe`\n    width:200px;\n    display:block;\n    margin:5px;\n`;","import { useEffect } from 'react';\nimport { getVideos } from '../../redux/currentMovie/currentMovieOperations';\nimport { selectVideos } from '../../redux/currentMovie/currentMovieSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { VideoList, VideoFrame } from './Video.styled';\n\nconst Video = ({ currentMovie }) => {\n  const dispatch = useDispatch();\n  const video = useSelector(selectVideos);\n\n  useEffect(() => {\n    if (currentMovie.media_type === 'movie') {\n      dispatch(getVideos({ id: currentMovie.id, type: 'movie' }));\n    } else if (currentMovie.media_type === 'tv') {\n      dispatch(getVideos({ id: currentMovie.id, type: 'tv' }));\n    }\n  }, [currentMovie.id, dispatch, currentMovie.media_type]);\n\n  return (\n    <>\n      <VideoList className=\"videos-container\">\n        {video ? (\n          video\n            .filter(video => video.name.includes('removed') !== true)\n            .map(video => {\n              return (\n                <li className=\"video-item\" key={video.id}>\n                  <VideoFrame\n                    title={video.name}\n                    src={`https://www.youtube.com/embed/${video.key}`}\n                  ></VideoFrame>\n                </li>\n              );\n            })\n        ) : (\n          <p>No videos yet..</p>\n        )}\n      </VideoList>\n    </>\n  );\n};\n\nexport default Video;\n","import { Outlet, NavLink } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getDetails } from '../redux/currentMovie/currentMovieOperations';\nimport { selectDetails } from '../redux/currentMovie/currentMovieSelectors';\nimport {\n  MoviePageContainer,\n  MovieTitle,\n  MovieLargeImageItem,\n  MoviePageNavigation,\n  Description,\n  Timer,\n  PageContainer,\n  MovieImageWrapper,\n  GenresItem,\n  GenresContainer\n} from './currentMoviePage.styled';\nimport Video from './videos';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst CurrentMoviePage = ({ movie }) => {\n  const dispatch = useDispatch();\n  const details = useSelector(selectDetails);\n  const [currentMovie, setCurrentMovie] = useState(movie);\n\n  useEffect(() => {\n    var localMovie;\n    if (localStorage.getItem('current_movie') !== null) {\n      localMovie = JSON.parse(localStorage.getItem('current_movie'));\n      if (localMovie.media_type === 'tv')\n        dispatch(getDetails({ id: localMovie.id, type: 'tv' }));\n      else if (localMovie.media_type === 'movie')\n        dispatch(getDetails({ id: localMovie.id, type: 'movie' }));\n      setCurrentMovie(localMovie);\n    } else {\n      if (movie.media_type === 'tv')\n        dispatch(getDetails({ id: movie.id, type: 'tv' }));\n      else if (movie.media_type === 'movie')\n        dispatch(getDetails({ id: movie.id, type: 'movie' }));\n    };\n  }, [dispatch, movie]);\n\n  return (\n\n    <PageContainer> {console.log(details)}\n      <MoviePageContainer>\n        <MovieImageWrapper>\n          <Timer circlepersentage={currentMovie.vote_average}>{currentMovie.vote_average}</Timer>\n          <MovieLargeImageItem\n            src={`https://image.tmdb.org/t/p/w500${currentMovie.poster_path}?api_key=${process.env.KEY}`}\n            alt={currentMovie.name ?? currentMovie.title}\n          />\n        </MovieImageWrapper>\n\n        <Description>\n          <MovieTitle>\n            {currentMovie.name ?? currentMovie.title}\n          </MovieTitle>\n          {details && <GenresContainer>\n            {details.genres.map(genre => { return (<GenresItem key={genre.id}>{genre.name}</GenresItem>) })}\n          </GenresContainer>}\n          <p>{currentMovie.overview}</p>\n          <p>Language: {currentMovie.original_language}</p>\n          <p>First air date: {currentMovie.first_air_date}</p>\n          <p>Country: {currentMovie.origin_country}</p>\n          <p>Popularity: {currentMovie.popularity}</p>\n          <p>Vote average: {currentMovie.vote_average}</p>\n          <MoviePageNavigation>\n            <NavLink className=\"movie-links-item\" to={'cast'}>\n              <h3>Cast</h3>\n            </NavLink>\n            <NavLink className=\"movie-links-item\" to={'reviews'}>\n              <h3>Reviews</h3>\n            </NavLink>\n          </MoviePageNavigation>\n          <Outlet />\n          <Video currentMovie={currentMovie}></Video>\n        </Description>\n      </MoviePageContainer>\n      <button>Show similar</button>\n    </PageContainer>\n  );\n};\n\nexport default CurrentMoviePage;\n"],"names":["MoviePageContainer","styled","Description","MovieLargeImageItem","MoviePageNavigation","Timer","props","circlepersentage","MovieImageWrapper","PageContainer","MovieTitle","GenresContainer","GenresItem","VideoList","VideoFrame","currentMovie","dispatch","useDispatch","video","useSelector","selectVideos","useEffect","media_type","getVideos","id","type","className","filter","name","includes","map","title","src","key","movie","details","selectDetails","useState","setCurrentMovie","localMovie","localStorage","getItem","JSON","parse","getDetails","console","log","vote_average","poster_path","process","KEY","alt","genres","genre","overview","original_language","first_air_date","origin_country","popularity","to"],"sourceRoot":""}