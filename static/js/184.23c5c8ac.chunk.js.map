{"version":3,"file":"static/js/184.23c5c8ac.chunk.js","mappings":"uQAEaA,EAAqBC,EAAAA,GAAAA,IAAH,6DAKlBC,EAAcD,EAAAA,GAAAA,IAAH,2CAGXE,EAAsBF,EAAAA,GAAAA,IAAH,sCAGnBG,EAAsBH,EAAAA,GAAAA,IAAH,uFAKnBI,EAAeJ,EAAAA,GAAAA,OAAH,gZ,mBCgDzB,EAtDc,SAAC,GAAsB,IAApBK,EAAmB,EAAnBA,aAETC,GAAWC,EAAAA,EAAAA,MA0BjB,OAxBAC,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAIL,GACZC,GAASK,EAAAA,EAAAA,IAAeN,EAAaO,IACtC,KAsBC,8BAAE,aAuBL,ECCD,EApDyB,SAAC,GAAe,IAAD,UAAZC,EAAY,EAAZA,MACpBC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAC3D,GAAwCC,EAAAA,EAAAA,UAASP,GAAjD,eAAOR,EAAP,KAAqBgB,EAArB,KACMf,GAAWC,EAAAA,EAAAA,MAWjB,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAIc,EAC0C,OAA1CC,aAAaC,QAAQ,mBACvBF,EAAaG,KAAKC,MAAMH,aAAaC,QAAQ,kBAC7CH,EAAgBC,GAChBhB,GAASqB,EAAAA,EAAAA,IAAaL,EAAWV,KAEpC,GAAE,CAACS,EAAiBf,KAGnB,iCACE,SAAC,KAAD,CAAMsB,GAAIZ,EAAoBa,QAA9B,UACE,SAACzB,EAAD,UAAc,eAEhB,UAACL,EAAD,YACE,SAACG,EAAD,CACE4B,IAAG,yCAAoCzB,EAAa0B,YAAjD,oBAAwEC,CAAAA,SAAAA,aAAAA,WAAAA,eAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,KACvFC,IAAG,UAAE7B,EAAa8B,YAAf,QAAuB9B,EAAa+B,SAEzC,UAACnC,EAAD,YACE,oCACGI,EAAa8B,YADhB,QACwB9B,EAAa+B,MAAM,KAAG,IAD9C,UAEG/B,EAAagC,qBAFhB,QAEiChC,EAAaiC,mBAE9C,uBAAIjC,EAAakC,YACjB,yBAAG,aAAWlC,EAAamC,sBAC3B,yBAAG,mBAAiBnC,EAAaoC,mBACjC,yBAAG,YAAUpC,EAAaqC,mBAC1B,yBAAG,eAAarC,EAAasC,eAC7B,yBAAG,iBAAetC,EAAauC,iBAC/B,UAACzC,EAAD,YACE,SAAC,KAAD,CAAS0C,UAAU,mBAAmBjB,GAAI,OAA1C,UACE,wBAAI,YAEN,SAAC,KAAD,CAASiB,UAAU,mBAAmBjB,GAAI,UAA1C,UACE,wBAAI,kBAGR,SAAC,KAAD,KACA,SAAC,EAAD,CAAOvB,aAAcA,YAK9B,C","sources":["CurrentMoviePage/currentMoviePage.styled.js","CurrentMoviePage/videos/Video.jsx","CurrentMoviePage/currentMoviePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviePageContainer = styled.div`\nmargin-top: 40px;\n  display: flex;\n`;\n\nexport const Description = styled.div` margin-left: 40px;\n`;\n \nexport const MovieLargeImageItem = styled.img`\nheight: 600px;`;\n\nexport const MoviePageNavigation = styled.nav`display: flex;\n  justify-content: space-between;\n  width: 100%;`;\n\n\nexport const GoBackButton = styled.button` display: block;\n   background: none;\n  color: pink;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  background-color: #222;\n  border-radius: 20px;\n  padding:15px;\n\n  transition: color 0.2s ease;\n  transition: background-color 0.2s ease;\nmargin-top: 100px;\n\n&:hover, &:focus{\n  color: #222;\n  background-color: coral;\n}`;","import { useEffect } from 'react';\nimport {\n  getMovieVideos,\n  // getSeriesVideos,\n  // getMovieById,\n} from '../../redux/currentMovie/currentMovieOperations';\n// import {\n//   selectcurrentMovie,\n//   selectVideos,\n// } from '../../redux/currentMovie/currentMovieSelectors';\nimport { useDispatch } from 'react-redux';\n\nconst Video = ({ currentMovie }) => {\n  // const [video, setVideo] = useState(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log(currentMovie);\n    dispatch(getMovieVideos(currentMovie.id));\n  });\n\n  //console.log(movie);\n\n  // useEffect(() => {\n  //   if (currentMovie.media_type === 'movie') {\n  //     console.log(currentMovie.id);\n  //     const video = dispatch(getMovieVideos(currentMovie.id));\n  //     const availableVideos = video.results.filter(\n  //       video => video.name.includes('removed') !== true\n  //     );\n  //     setVideo(availableVideos);\n  //   } else if (currentMovie.media_type === 'tv') {\n  //     const video = dispatch(getSeriesVideos(currentMovie.id));\n  //     const availableVideos = video.results.filter(\n  //       video => video.name.includes('removed') !== true\n  //     );\n  //     setVideo(availableVideos);\n  //   }\n  // }, [setVideo, currentMovie.id, currentMovie.media_type, dispatch]);\n\n  return (\n    <>\n      Videoooos\n      {/* <ul className=\"videos-container\">\n        {video ? (\n          video.map(video => {\n            return (\n              <li className=\"video-item\" key={video.id}>\n                <p className=\"author\">{video.name}</p>\n                <iframe\n                  width=\"420\"\n                  height=\"315\"\n                  title={video.name}\n                  src={`https://www.youtube.com/embed/${video.key}`}\n                ></iframe>\n              </li>\n            );\n          })\n        ) : (\n          <p>No videos yet..</p>\n        )}\n      </ul> */}\n    </>\n  );\n};\n\nexport default Video;\n","import { Outlet, Link, useLocation, NavLink } from 'react-router-dom';\nimport { useEffect, useRef, useState } from 'react';\nimport { getMovieById } from '../redux/currentMovie/currentMovieOperations';\nimport {\n  MoviePageContainer,\n  GoBackButton,\n  MovieLargeImageItem,\n  MoviePageNavigation,\n  Description,\n} from './currentMoviePage.styled';\nimport Video from './videos';\nimport { useDispatch } from 'react-redux';\n\nconst CurrentMoviePage = ({ movie }) => {\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/search');\n  const [currentMovie, setCurrentMovie] = useState(movie);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    var localMovie;\n    if (localStorage.getItem('current_movie') !== null) {\n      localMovie = JSON.parse(localStorage.getItem('current_movie'));\n      setCurrentMovie(localMovie);\n      dispatch(getMovieById(localMovie.id));\n    }\n  }, [setCurrentMovie, dispatch]);\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>\n        <GoBackButton>Go back</GoBackButton>\n      </Link>\n      <MoviePageContainer>\n        <MovieLargeImageItem\n          src={`https://image.tmdb.org/t/p/w500${currentMovie.poster_path}?api_key=${process.env.KEY}`}\n          alt={currentMovie.name ?? currentMovie.title}\n        />\n        <Description>\n          <h1>\n            {currentMovie.name ?? currentMovie.title} /{' '}\n            {currentMovie.original_name ?? currentMovie.original_title}\n          </h1>\n          <p>{currentMovie.overview}</p>\n          <p>Language: {currentMovie.original_language}</p>\n          <p>First air date: {currentMovie.first_air_date}</p>\n          <p>Country: {currentMovie.origin_country}</p>\n          <p>Popularity: {currentMovie.popularity}</p>\n          <p>Vote average: {currentMovie.vote_average}</p>\n          <MoviePageNavigation>\n            <NavLink className=\"movie-links-item\" to={'cast'}>\n              <h3>Cast</h3>\n            </NavLink>\n            <NavLink className=\"movie-links-item\" to={'reviews'}>\n              <h3>Reviews</h3>\n            </NavLink>\n          </MoviePageNavigation>\n          <Outlet />\n          <Video currentMovie={currentMovie}></Video>\n        </Description>\n      </MoviePageContainer>\n    </>\n  );\n};\n\nexport default CurrentMoviePage;\n"],"names":["MoviePageContainer","styled","Description","MovieLargeImageItem","MoviePageNavigation","GoBackButton","currentMovie","dispatch","useDispatch","useEffect","console","log","getMovieVideos","id","movie","location","useLocation","backLinkLocationRef","useRef","state","from","useState","setCurrentMovie","localMovie","localStorage","getItem","JSON","parse","getMovieById","to","current","src","poster_path","process","KEY","alt","name","title","original_name","original_title","overview","original_language","first_air_date","origin_country","popularity","vote_average","className"],"sourceRoot":""}