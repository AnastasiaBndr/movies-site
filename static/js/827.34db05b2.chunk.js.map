{"version":3,"file":"static/js/827.34db05b2.chunk.js","mappings":"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","sources":["pages/CurrentMoviePage/currentMoviePage.styled.js","components/Cast/Cast.jsx","components/ShowSimilar/ShowSimilar.styled.js","components/ShowSimilar/ShowSimilar.jsx","pages/CurrentMoviePage/currentMoviePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviePageContainer = styled.div`\n  margin-top: 20px;\n  width: 100%;\n`;\n\nexport const Description = styled.div`\n  margin-top: 20px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  @media screen and (min-width: 768px) {\n    margin-left: 40px;\n  }\n\n  @media screen and (min-width: 1440px) {\n  }\n`;\n\nexport const MovieLargeImageItem = styled.img`\n  @media screen and (min-width: 768px) {\n    height: 600px;\n  }\n  height: 550px;\n  border-radius: 2%;\n`;\n\nexport const MoviePageNavigation = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport const Timer = styled.div`\n  position: absolute;\n  top: 30px;\n  left: 280px;\n  display: flex;\n  width: 60px;\n  height: 60px;\n  font-size: 20px;\n  border: 3px solid transparent;\n  border-radius: 50%;\n  color: coral;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(#222, #222) content-box no-repeat,\n    conic-gradient(\n        coral ${props => props.circlepersentage * 10}%,\n        0,\n        transparent\n      )\n      border-box;\n\n  z-index: 1;\n\n  @media screen and (min-width: 768px) {\n    top: 20px;\n    left: 310px;\n    border: 2px solid transparent;\n  }\n`;\n\nexport const MovieImageWrapper = styled.div`\n  position: relative;\n`;\n\nexport const PageContainer = styled.div`\n  overflow: hidden;\n  padding: 0 30px 0 30px;\n`;\n\nexport const MovieTitle = styled.a`\n  font-size: 50px;\n  font-weight: 600;\n  display: block;\n\n  margin-bottom: 10px;\n`;\n\nexport const MovieTagLine = styled.p`\n  font-style: italic;\n  color: #404040cc;\n  &:before {\n    color: #ccc;\n    content: open-quote;\n    font-size: 4em;\n    line-height: 0.1em;\n    margin-right: 0.25em;\n    vertical-align: -0.4em;\n  }\n`;\n\nexport const GenresContainer = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  align-items: center;\n`;\nexport const GenresItem = styled.li`\n  margin: 10px;\n  &:first-child {\n    margin-left: 0;\n  }\n  border: 1px solid #222;\n  border-radius: 10px;\n  padding: 8px;\n  opacity: 0.5;\n  background-color: rgba(34, 34, 34, 0.2);\n`;\n\nexport const FinishedButton = styled.button`\n  color: pink;\n  padding: 0;\n  font: inherit;\n  font-size: 20px;\n  cursor: pointer;\n  border: none;\n  padding: 15px;\n  background-color: #222;\n  border-radius: 10px;\n  transition: color 0.2s ease;\n  transition: background-color 0.2s ease;\n\n  width: 100%;\n  height: 50px;\n  display: block;\n  margin-bottom: 10px;\n  margin-top: 10px;\n\n  &:hover,\n  &:focus {\n    color: #222;\n    background-color: coral;\n  }\n`;\n\nexport const MovieImageDescrWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media screen and (min-width: 768px) {\n    align-items: start;\n    flex-direction: row;\n  }\n\n  @media screen and (min-width: 1440px) {\n  }\n`;\n","// import { useState, useEffect } from 'react';\nimport './Cast.styled.js';\n\nconst Cast = ({ movie, apiComponent }) => {\n  // const [fullMovieInfo, setFullMovieInfo] = useState(null);\n\n  // useEffect(() => {\n  //   async function fetchMovieInfo() {\n  //     if (movie.media_type === 'movie') {\n  //       const movieInfo = await apiComponent.fetchMoviesById(\n  //         movie.id,\n  //         apiComponent.links.details,\n  //         apiComponent.params.credits\n  //       );\n\n  //       const updatedCast = movieInfo.cast\n  //         .map(actor => {\n  //           if (actor.profile_path !== null) {\n  //             actor.ImageFullPath = `https://image.tmdb.org/t/p/w200${\n  //               actor.profile_path\n  //             }?api_key=${apiComponent.getkey()}`;\n  //           } else {\n  //             console.log(process.env.PUBLIC_URL);\n  //             actor.ImageFullPath =\n  //               'http://localhost:3000/goit-react-hw-05-movies/static/media/profile_image_not_found.d3395e8a7ba4b7bc3a15.jpg';\n  //           }\n  //           return actor;\n  //         })\n  //         .filter(actor => actor.profile_path !== null);\n\n  //       movieInfo.cast = updatedCast;\n\n  //       setFullMovieInfo(movieInfo);\n  //       console.log(movieInfo);\n  //     } else if (movie.media_type === 'tv') {\n  //       const movieInfo = await apiComponent.fetchMoviesById(\n  //         movie.id,\n  //         apiComponent.links.seriesDetails,\n  //         apiComponent.params.credits\n  //       );\n\n  //       const updatedCast = movieInfo.cast\n  //         .map(actor => {\n  //           if (actor.profile_path !== null) {\n  //             actor.ImageFullPath = `https://image.tmdb.org/t/p/w200${\n  //               actor.profile_path\n  //             }?api_key=${apiComponent.getkey()}`;\n  //           }\n  //           return actor;\n  //         })\n  //         .filter(actor => actor.profile_path !== null);\n\n  //       movieInfo.cast = updatedCast;\n\n  //       setFullMovieInfo(movieInfo);\n  //       console.log(movieInfo);\n  //     }\n  //   }\n\n  //   fetchMovieInfo();\n  // }, [apiComponent, movie.id, movie.media_type]);\n\n  return (\n    <>cast!!\n      {/* {fullMovieInfo ? (\n        <ul className=\"cast-container\">\n          {fullMovieInfo.cast.map(actor => {\n            return (\n              <li className=\"cast-element\" key={actor.id}>\n                <img\n                  className=\"actor-profile-picture\"\n                  src={actor.ImageFullPath}\n                  alt={actor.name}\n                />\n\n                <p>\"{actor.character}\"</p>\n                <p>{actor.name}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>No cast info(</p>\n      )} */}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const MoviesItem = styled.li`\n  width: 220px;\n  list-style-type: none;\n  margin: 10px;\n`;\n\nexport const BackNextButtons = styled.button`\n  background: none;\n  color: pink;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  background-color: #222;\n  border-radius: 20px;\n  margin: 2px;\n\n  transition: color 0.2s ease;\n  transition: background-color 0.2s ease;\n\n  width: ${props => (props.$primary ? '30px' : '50px')};\n  height: ${props => (props.$primary ? '30px' : '40px')};\n  display: block;\n  margin-top: ${props => (props.$primary ? '5px' : '0')};\n\n  &:hover,\n  &:focus {\n    color: #222;\n    background-color: coral;\n  }\n`;\n\nexport const MoviesList = styled.ul`\n  display: flex;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  padding: 0;\n  overflow-y: hidden;\n  padding-bottom: 20px;\n  width: 100%;\n\n  &::-webkit-scrollbar {\n    -webkit-appearance: none;\n    height: 5px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    border-radius: 2px;\n    background-color: coral;\n    height: 5px;\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  display: inline-block;\n  border-radius: 255px 15px 225px 15px/15px 225px 15px 255px;\n  line-height: 1.5em;\n  background-color: #222;\n  padding: 5px;\n  text-align: center;\n  border-radius: 10%;\n  h3 {\n    margin: 0;\n    color: white;\n    font-weight: 400;\n    max-width: 200px;\n  }\n  img {\n    border-radius: 10%;\n    margin: 0;\n  }\n`;\n\nexport const MoviesTitle = styled.h2``;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { getSimilarMovies } from \"../../redux/moviesList/moviesListOperations\";\nimport { useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { selectMovies } from \"../../redux/moviesList/moviesListSelectors\";\n\nimport { MoviesList, MoviesItem, ImageContainer, MoviesTitle } from './ShowSimilar.styled'\nimport { useTranslation } from \"react-i18next\";\nimport { selectLanguage } from \"../../redux/global/globalSlice\";\n\nconst ShowSimilar = () => {\n    const params = useParams();\n    const dispatch = useDispatch();\n    const movies = useSelector(selectMovies) || [];\n    const { t } = useTranslation();\n    const language = useSelector(selectLanguage) || 'en-US';\n\n    useEffect(() => {\n        dispatch(getSimilarMovies({ id: params.id, type: params.type, language: language }));\n    }, [dispatch, params.id, params.type, language]);\n\n    console.log(movies);\n    return (<><MoviesTitle>{t('current_movie_page.you_may_also_like')}</MoviesTitle>\n        <MoviesList>\n            {language === 'uk-UKR' ? movies.filter(movie => movie.poster_path && movie.overview.includes('а' || 'і' || 'ф' || 'н' || 'п' || 'к')).map(movie => {\n                return (\n                    <MoviesItem key={movie.id || movie.globalId}>\n                        <Link\n                            to={'/' + (movie.media_type || params.type) + '/' +\n                                (movie.id || movie.globalId)\n                            }\n                        >\n                            <ImageContainer>\n                                <img\n                                    src={`https://image.tmdb.org/t/p/w200${movie.poster_path || movie.poster\n                                        }?api_key=${process.env.KEY}`}\n                                    alt={`${movie.title}`}\n                                />\n                                <h3>{movie.title || movie.name}</h3>\n                            </ImageContainer>\n                        </Link>\n                    </MoviesItem>\n                );\n            }) : movies.filter(movie => movie.poster_path).map(movie => {\n                return (\n                    <MoviesItem key={movie.id || movie.globalId}>\n                        <Link\n                            to={'/' + (movie.media_type || params.type) + '/' +\n                                (movie.id || movie.globalId)\n                            }\n                        >\n                            <ImageContainer>\n                                <img\n                                    src={`https://image.tmdb.org/t/p/w200${movie.poster_path || movie.poster\n                                        }?api_key=${process.env.KEY}`}\n                                    alt={`${movie.title}`}\n                                />\n                                <h3>{movie.title || movie.name}</h3>\n                            </ImageContainer>\n                        </Link>\n                    </MoviesItem>\n                );\n            })}\n        </MoviesList></>);\n}\n\nexport default ShowSimilar;","import { Outlet, NavLink, useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport {\n  getDetails,\n  getVideos,\n} from '../../redux/currentMovie/currentMovieOperations';\nimport { selectDetails } from '../../redux/currentMovie/currentMovieSelectors';\nimport \"./styles.css\";\nimport {\n  MoviePageContainer,\n  MovieTitle,\n  MovieTagLine,\n  MovieLargeImageItem,\n  MoviePageNavigation,\n  Description,\n  Timer,\n  PageContainer,\n  MovieImageWrapper,\n  GenresItem,\n  GenresContainer,\n  FinishedButton,\n  MovieImageDescrWrapper\n\n} from './currentMoviePage.styled';\nimport Cast from '../../components/Cast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from '../../redux/auth/authSelectors';\nimport { addMovieToList, getUserMovies } from '../../redux/userMovies/userMoviesOperations';\nimport ShowSimilar from '../../components/ShowSimilar';\nimport { useTranslation } from 'react-i18next';\nimport { selectLanguage } from '../../redux/global/globalSlice';\n\nconst CurrentMoviePage = () => {\n  const dispatch = useDispatch();\n  const details = useSelector(selectDetails);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const routeParams = useParams();\n  const { t } = useTranslation();\n  const language = useSelector(selectLanguage) || 'en-US';\n\n  useEffect(() => {\n    dispatch(getDetails({ id: routeParams.id, type: routeParams.type, language: language }));\n    dispatch(getVideos({ id: routeParams.id, type: routeParams.type, language: language }));\n  }, [dispatch, routeParams.id, routeParams.type, language]);\n\n  const addToList = ({ target }) => {\n\n    dispatch(getUserMovies);\n\n    dispatch(addMovieToList({\n      globalId: details.id + \"\",\n      name: details.name ? details.name : details.title,\n      poster: details.poster_path,\n      status: target.name,\n      media_type: routeParams.type,\n    }));\n\n  }\n\n  return (\n    <PageContainer>\n      {details && (\n        <MoviePageContainer>\n          <MovieImageDescrWrapper>\n            <div>\n              <MovieImageWrapper>\n                <Timer circlepersentage={details.vote_average}>\n                  {details.vote_average}\n                </Timer>\n                <MovieLargeImageItem\n                  src={`https://image.tmdb.org/t/p/w500${details.poster_path}?api_key=${process.env.KEY}`}\n                  alt={details.name ?? details.title}\n                />\n              </MovieImageWrapper>\n              {isLoggedIn && <div>\n                <FinishedButton name=\"favorite\" onClick={addToList}>{t('current_movie_page.favorite')}</FinishedButton>\n                <FinishedButton name=\"watching\" onClick={addToList}>{t('current_movie_page.watching')}</FinishedButton>\n                <FinishedButton name=\"finished\" onClick={addToList}>{t('current_movie_page.finished')}</FinishedButton>\n                <FinishedButton name=\"dropped\" onClick={addToList}>{t('current_movie_page.dropped')}</FinishedButton>\n              </div>}\n            </div>\n\n            <Description>\n              <MovieTitle>{details.name ?? details.title}</MovieTitle>\n              <MovieTagLine>{details.tagline}</MovieTagLine>\n              {details && (\n                <GenresContainer>\n                  {details.genres.map(genre => {\n                    return <GenresItem key={genre.id}>{genre.name}</GenresItem>;\n                  })}\n                </GenresContainer>\n              )}\n              <img src={`https://image.tmdb.org/t/p/w500${details.backdrop_path}?api_key=${process.env.KEY}`} alt={details.name ?? details.title} />\n              <p>{details.overview}</p>\n              <p>{t('current_movie_page.language')}: {details.original_language}</p>\n              <p>{t('current_movie_page.first_air_date')}: {details.first_air_date}</p>\n              <p>{t('current_movie_page.country')}: {details.origin_country}</p>\n              <p>{t('current_movie_page.popularity')}: {details.popularity}</p>\n              <p>{t('current_movie_page.vote_average')}: {details.vote_average}</p>\n            </Description>\n          </MovieImageDescrWrapper>\n          <Cast></Cast>\n\n          <MoviePageNavigation>\n\n            <NavLink className=\"movie-links-item\" to={'reviews'}>\n              <h3>{t('current_movie_page.reviews')}</h3>\n            </NavLink>\n            <NavLink className=\"movie-links-item\" to={'trailer'}>\n              <h3>{t('current_movie_page.trailer')}</h3>\n            </NavLink>\n          </MoviePageNavigation>\n          <Outlet />\n        </MoviePageContainer>\n      )}\n\n      <ShowSimilar />\n    </PageContainer>\n  );\n};\n\nexport default CurrentMoviePage;\n"],"names":["MoviePageContainer","styled","Description","MovieLargeImageItem","MoviePageNavigation","Timer","props","circlepersentage","MovieImageWrapper","PageContainer","MovieTitle","MovieTagLine","GenresContainer","GenresItem","FinishedButton","MovieImageDescrWrapper","movie","apiComponent","MoviesItem","MoviesList","$primary","ImageContainer","MoviesTitle","params","useParams","dispatch","useDispatch","movies","useSelector","selectMovies","t","useTranslation","language","selectLanguage","useEffect","getSimilarMovies","id","type","console","log","filter","poster_path","overview","includes","map","to","media_type","globalId","src","poster","process","KEY","alt","title","name","details","selectDetails","isLoggedIn","selectIsLoggedIn","routeParams","getDetails","getVideos","addToList","target","getUserMovies","addMovieToList","status","vote_average","onClick","tagline","genres","genre","backdrop_path","original_language","first_air_date","origin_country","popularity","className"],"sourceRoot":""}